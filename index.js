// Generated by CoffeeScript 1.9.3
(function() {
  var Mail, config, exceptionHandlerName, exceptionHandlerOptions, exceptionHandlers, formatter, i, index, item, j, len, len1, levelOptions, levelOptionsColors, logger, ref, ref1, ref2, ref3, transportName, transportOptions, transports, winston;

  winston = require('winston');

  Mail = require('winston-mail').Mail;

  config = require('../../config.json').log;

  levelOptions = {};

  levelOptionsColors = {};

  ref = config.levels;
  for (index = i = 0, len = ref.length; i < len; index = ++i) {
    item = ref[index];
    levelOptions[item.name] = index;
  }

  ref1 = config.levels;
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    item = ref1[j];
    levelOptionsColors[item.name] = item.color;
  }

  winston.addColors(levelOptionsColors);

  formatter = function(options) {
    return JSON.stringify({
      '@timestamp': new Date().toISOString(),
      '@fields': {
        'AppType': config.appType,
        'AppName': config.appName,
        'ServerName': config.serverName,
        'Severity': {
          'name': options.level,
          'code': levelOptions[options.level]
        },
        'Debug': {
          'message': options.message,
          'trace': options.meta.trace ? options.meta.trace : {},
          'stack': options.meta.stack ? options.meta.stack : {},
          'os': options.meta.os ? options.meta.os : {},
          'process': options.meta.process ? options.meta.process : {}
        }
      }
    });
  };

  transports = [];

  exceptionHandlers = [];

  ref2 = config.transports;
  for (transportName in ref2) {
    transportOptions = ref2[transportName];
    if (transportOptions.enable) {
      delete transportOptions.enable;
      if (transportOptions.formatter) {
        transportOptions.formatter = formatter;
      } else {
        delete transportOptions.formatter;
      }
      transports.push(new winston.transports[transportName](transportOptions));
    }
  }

  ref3 = config.exceptionHandlers;
  for (exceptionHandlerName in ref3) {
    exceptionHandlerOptions = ref3[exceptionHandlerName];
    if (exceptionHandlerOptions.enable) {
      delete exceptionHandlerOptions.enable;
      if (exceptionHandlerOptions.formatter) {
        exceptionHandlerOptions.formatter = formatter;
      } else {
        delete exceptionHandlerOptions.formatter;
      }
      exceptionHandlers.push(new winston.transports[exceptionHandlerName](exceptionHandlerOptions));
    }
  }

  logger = new winston.Logger({
    levels: levelOptions,
    transports: transports,
    exceptionHandlers: exceptionHandlers,
    exitOnError: config.exitOnError
  });

  module.exports = logger;

}).call(this);
